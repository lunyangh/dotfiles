// Place your key bindings in this file to override the defaults
/*
version log: 
v3: 
This version fits following keyboard configuration: 

915 TKL keybaord connected to mac: 
  * command key maps to left control, 
  * control key maps to window key, 
  * option key maps to alt key.  
  * control key also maps to Caps key. this is necessary for using cap key as  modifier key to enable cap key + space type modifier. as mac does not suppport command key as modifier. 
  
The key adjustment here aims to mimic windows keyboard with the key adjustment 

*/

[
  /*
        disable mac keys for window usage
  */

  {
    "key": "shift+insert",
    "command": "-editor.action.clipboardPasteAction"
  },

  {
    "key": "cmd+\\",
    "command": "-workbench.action.splitEditor"
  },
  {
    "key": "cmd+k cmd+\\",
    "command": "-workbench.action.splitEditorOrthogonal"
  },
  {
    "key": "cmd+\\",
    "command": "-workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported"
  },
  // disable default comment line
  {
    "key": "shift+cmd+7",
    "command": "-editor.action.commentLine",
    "when": "editorTextFocus"
  },
  // disable change UI font size
  {
    "key": "cmd+=",
    "command": "-workbench.action.zoomIn"
  },
  {
    "key": "cmd+-",
    "command": "-workbench.action.zoomOut"
  },
  // disable default split
  {
    "key": "cmd+k left",
    "command": "-workbench.action.splitEditor"
  },
  // remove some not useful keybindings
  {
    "key": "shift+alt+i",
    "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  {
    "key": "shift+cmd+l",
    "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorHasSelection && editorTextFocus"
  },
  // disable atom extension hotkey
  // {
  //   "key": "shift+cmd+o",
  //   "command": "-workbench.action.files.openFileFolder"
  // },
  // cmd+n and shift+cmd+n select next/previous occurrence of highlighted
  // {
  //   "key": "shift+cmd+n",
  //   "command": "-workbench.action.newWindow"
  // },
  // {
  //   "key": "cmd+n",
  //   "command": "-workbench.action.files.newUntitledFile"
  // },
  // {
  //   "key": "cmd+f3",
  //   "command": "-editor.action.nextSelectionMatchFindAction",
  //   "when": "editorFocus"
  // },
  // {
  //   "key": "shift+cmd+f3",
  //   "command": "-editor.action.previousSelectionMatchFindAction",
  //   "when": "editorFocus"
  // },

  /* 
  ************** from here custom keybindings I added
  
  */
  /* change UI font size */
  // change font zoom not overall zoom
  {
    "key": "cmd+=",
    "command": "editor.action.fontZoomIn",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+-",
    "command": "editor.action.fontZoomOut",
    "when": "editorTextFocus"
  },
  /* split pane and navigation */
  // navigate broadly across different components
  {
    "key": "ctrl+h",
    "command": "workbench.action.navigateLeft",
    "when": "editorFocus || sideBarFocus || activeEditorGroupEmpty || terminalFocus || outlineFocused"
  },
  {
    "key": "ctrl+l",
    "command": "workbench.action.navigateRight",
    "when": "editorFocus || sideBarFocus || activeEditorGroupEmpty || terminalFocus || outlineFocused"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.navigateUp",
    "when": "editorFocus || sideBarFocus || activeEditorGroupEmpty || terminalFocus || outlineFocused"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.navigateDown",
    "when": "editorFocus || sideBarFocus || activeEditorGroupEmpty || terminalFocus || outlineFocused"
  },

  // navigate across panes

  // ctrl + space arrow key, copy and split editor in direction
  {
    "key": "ctrl+space right",
    "command": "workbench.action.splitEditorRight"
  },
  {
    "key": "ctrl+space left",
    "command": "workbench.action.splitEditorLeft"
  },
  {
    "key": "ctrl+space up",
    "command": "workbench.action.splitEditorUp"
  },
  {
    "key": "ctrl+space down",
    "command": "workbench.action.splitEditorDown"
  },
  // ctrl + space + shift hjkl to copy and split editor in direction
  {
    "key": "ctrl+space shift+l",
    "command": "workbench.action.splitEditorRight"
  },
  {
    "key": "ctrl+space shift+h",
    "command": "workbench.action.splitEditorLeft"
  },
  {
    "key": "ctrl+space shift+j",
    "command": "workbench.action.splitEditorUp"
  },
  {
    "key": "ctrl+space shift+k",
    "command": "workbench.action.splitEditorDown"
  },
  // ctrl + space + hjkl   move window to group in direction
  {
    "key": "ctrl+space l",
    "command": "workbench.action.moveEditorToRightGroup"
  },
  {
    "key": "ctrl+space h",
    "command": "workbench.action.moveEditorToLeftGroup"
  },
  {
    "key": "ctrl+space j",
    "command": "workbench.action.moveEditorToAboveGroup"
  },
  {
    "key": "ctrl+space k",
    "command": "workbench.action.moveEditorToBelowGroup"
  },

  // close editor window
  {
    "key": "alt+w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "alt+w",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },

  {
    "key": "ctrl+space w",
    "command": "workbench.action.closeActiveEditor"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor"
  },

  // build latex file with latex builder
  {
    "key": "ctrl+space b",
    "command": "latex-workshop.build"
  },
  // toggle editors across group boundaries
  {
    "key": "ctrl+pageup",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "ctrl+pagedown",
    "command": "workbench.action.nextEditor"
  },
  {
    "key": "cmd+pageup",
    "command": "workbench.action.previousEditor"
  },
  {
    "key": "cmd+pagedown",
    "command": "workbench.action.nextEditor"
  },
  // toggle editor within group
  {
    "key": "ctrl+space pageup",
    "command": "workbench.action.previousEditorInGroup"
  },
  {
    "key": "ctrl+space pagedown",
    "command": "workbench.action.nextEditorInGroup"
  },

  // vim like alternative file
  {
    "key": "ctrl+6",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+6",
    "command": "-workbench.action.openEditorAtIndex6"
  },
  // setting copied from https://github.com/VSCodeVim/Vim/pull/3623, help with moving in wrap line
  // {
  //   "key": "up",
  //   "command": "cursorUp",
  //   "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert' &&!suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  // },
  // {
  //   "key": "down",
  //   "command": "cursorDown",
  //   "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Insert' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  // },

  {
    "key": "cmd+r",
    "command": "-workbench.action.openRecent"
  },

  // entry point of command palatte and active files
  {
    "key": "ctrl+space shift+p",
    "command": "workbench.action.showCommands"
  },
  {
    "key": "ctrl+space p",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "cmd+p",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "shift+cmd+p",
    "command": "-workbench.action.showCommands"
  },
  {
    "key": "ctrl+shift+p",
    "command": "-workbench.action.showCommands"
  },

  // navigate command palatte options
  {
    "key": "ctrl+j",
    "command": "workbench.action.quickOpenNavigateNextInViewPicker",
    "when": "inQuickOpen && inViewsPicker"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.quickOpenNavigatePreviousInViewPicker",
    "when": "inQuickOpen && inViewsPicker"
  },

  /* more navigation/jump around */
  /* navigate back/forward to previous/next location*/
  {
    "key": "alt+left",
    "command": "workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "alt+right",
    "command": "workbench.action.navigateForward",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "ctrl+shift+-",
    "command": "-workbench.action.navigateForward",
    "when": "canNavigateForward"
  },

  /* breadcrumbs navigation */
  {
    "key": "h",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "l",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "j",
    "command": "breadcrumbs.focusDown",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "k",
    "command": "breadcrumbs.focusUp",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  /* list navigation */
  {
    "key": "o",
    "command": "list.toggleExpand",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "u",
    "command": "list.focusParent",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "k",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },
  {
    "key": "j",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus && !treestickyScrollFocused"
  },

  // file explorer short cut management
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "ctrl+space ctrl+a",
    "command": "fileutils.newFolderAtRoot"
  },
  {
    "key": "r r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "enter",
    "command": "-renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "y p",
    "command": "copyFilePath",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "alt+cmd+c",
    "command": "-copyFilePath",
    "when": "!editorFocus"
  },
  // toggle side bar on right
  {
    "key": "ctrl+space shift+\\",
    "command": "workbench.action.toggleAuxiliaryBar"
  },
  {
    "key": "alt+cmd+b",
    "command": "-workbench.action.toggleAuxiliaryBar"
  },
  // toggle side bar on left
  {
    "key": "ctrl+space \\",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "cmd+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "cmd+\\",
    "command": "-workbench.action.terminal.split",
    "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
  },

  // toggle terminal
  {
    "key": "alt+\\",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "cmd+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "ctrl+space z",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  // focus different parts
  {
    "key": "cmd+\\",
    "command": "workbench.files.action.focusFilesExplorer"
  },
  {
    "key": "cmd+alt+\\",
    "command": "outline.focus"
  },
  // focus current editor
  {
    "key": "ctrl+space e",
    "command": "workbench.action.focusActiveEditorGroup"
  },

  //  these are default keybinding when using cmd+key
  // {
  //   "key": "cmd+]",
  //   "command": "editor.action.indentLines",
  //   "when": "editorTextFocus && !editorReadonly"
  // },
  // {
  //   "key": "cmd+[",
  //   "command": "editor.action.outdentLines",
  //   "when": "editorTextFocus && !editorReadonly"
  // },
  // {
  //   "key": "cmd+x",
  //   "command": "editor.action.clipboardCutAction"
  // },
  // {
  //   "key": "cmd+c",
  //   "command": "filesExplorer.copy",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !inputFocus"
  // },
  // {
  //   "key": "cmd+x",
  //   "command": "filesExplorer.cut",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  // },
  // {
  //   "key": "cmd+v",
  //   "command": "filesExplorer.paste",
  //   "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceReadonly && !inputFocus"
  // },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+n",
    "command": "-selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+j",
    "command": "-editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+p",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  //  these are default keybinding when using cmd+key
  // {
  //   "key": "cmd+a",
  //   "command": "editor.action.selectAll"
  // },
  {
    "key": "ctrl+a",
    "command": "-cursorLineStart",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+a",
    "command": "-cursorLineStartSelect",
    "when": "textInputFocus"
  },

  // change command key from mac's sentence begin/end jump to word jump.

  // remove more complicated bindings to do word selection
  {
    "key": "ctrl+alt+right",
    "command": "-cursorWordPartRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+right",
    "command": "-editor.action.smartSelect.expand",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+alt+right",
    "command": "-cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+left",
    "command": "-cursorWordPartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+shift+alt+left",
    "command": "-cursorWordPartLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+delete",
    "command": "-deleteAllRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+backspace",
    "command": "-deleteWordPartLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+delete",
    "command": "-deleteWordPartRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+backspace",
    "command": "-deleteLeft",
    "when": "textInputFocus"
  },

  // remove default to do word selection with alt/option key in mac
  {
    "key": "alt+left",
    "command": "-cursorWordLeft",
    "when": "textInputFocus"
  },
  {
    "key": "alt+right",
    "command": "-cursorWordEndRight",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+right",
    "command": "-cursorWordEndRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+alt+left",
    "command": "-cursorWordLeftSelect",
    "when": "textInputFocus"
  },

  {
    "key": "alt+backspace",
    "command": "-deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+delete",
    "command": "-deleteWordRight",
    "when": "textInputFocus && !editorReadonly"
  },

  // remove default behavior where cmd controls sentence jump
  {
    "key": "cmd+left",
    "command": "-cursorHome",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+right",
    "command": "-cursorEnd",
    "when": "textInputFocus"
  },
  {
    "key": "shift+cmd+right",
    "command": "-cursorEndSelect",
    "when": "textInputFocus"
  },
  {
    "key": "shift+cmd+left",
    "command": "-cursorHomeSelect",
    "when": "textInputFocus"
  },

  // use home/end to control sentense begin/end jump, but those are default
  // {
  //   "key": "End",
  //   "command": "cursorEnd",
  //   "when": "textInputFocus"
  // },
  // {
  //   "key": "Home",
  //   "command": "cursorHome",
  //   "when": "textInputFocus"
  // },

  {
    "key": "cmd+shift+home",
    "command": "cursorHomeSelect",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+shift+end",
    "command": "cursorEndSelect",
    "when": "textInputFocus"
  },

  // set word jump/select with command
  {
    "key": "cmd+left",
    "command": "cursorWordLeft",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+right",
    "command": "cursorWordRight",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+shift+left",
    "command": "cursorWordLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+shift+right",
    "command": "cursorWordRightSelect",
    "when": "textInputFocus"
  },

  {
    "key": "cmd+delete",
    "command": "deleteWordRight",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "cmd+backspace",
    "command": "deleteWordLeft",
    "when": "textInputFocus && !editorReadonly"
  },

  // jump between file top/ down with home and end
  {
    "key": "cmd+home",
    "command": "cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+up",
    "command": "-cursorTop",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+end",
    "command": "cursorBottom",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+down",
    "command": "-cursorBottom",
    "when": "textInputFocus"
  },

  // default copy paste function, use cmd, no need to change.
  // {
  //   "key": "cmd+v",
  //   "command": "-editor.action.clipboardPasteAction"
  // },
  // {
  //   "key": "cmd+c",
  //   "command": "-editor.action.clipboardCopyAction"
  // },

  /* ctrl ; prefix based keys */
  // sentence control, duplicate, delete nad add cursor
  {
    "key": "ctrl+; i",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected"
  },

  {
    "key": "ctrl+; d",
    "command": "editor.action.duplicateSelection"
  },
  {
    "key": "ctrl+; k",
    "command": "editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  // lower and upper letter transform
  {
    "key": "ctrl+; u",
    "command": "editor.action.transformToUppercase",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+; l",
    "command": "editor.action.transformToLowercase",
    "when": "textInputFocus"
  },

  // toggle zen mode
  {
    "key": "ctrl+; z",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "cmd+k z",
    "command": "-workbench.action.toggleZenMode",
    "when": "!isAuxiliaryWindowFocusedContext"
  },

  /* command related to find, search, replace */

  // replace command for current editor
  {
    "key": "alt+cmd+f",
    "command": "-editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  {
    "key": "ctrl+space r",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus || editorIsOpen"
  },
  // replace command in workbench for all files
  {
    "key": "ctrl+space shift+r",
    "command": "workbench.action.replaceInFiles",
    "when": "editorFocus || editorIsOpen"
  },

  // command to search current selection in text and add next match to selection as multiple cursor
  {
    "key": "cmd+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+f",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  // navigate find/replace search result
  {
    "key": "ctrl+space n",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+space shift+n",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },

  /*  toggle comment */
  // cmd is default, not need to add
  // {
  //   "key": "cmd+/",
  //   "command": "editor.action.commentLine",
  //   "when": "editorTextFocus && !editorReadonly"
  // },
  {
    "key": "ctrl+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+space /",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+alt+a",
    "command": "-editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  /* peek definition */
  {
    "key": "ctrl+space shift+d",
    "command": "editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "alt+f12",
    "command": "-editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },

  /* debug related */
  // debug console now accepts command with shift + enter
  {
    "key": "ctrl+enter",
    "command": "repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "enter",
    "command": "-repl.action.acceptInput",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "alt+a e",
    "command": "editor.debug.action.selectionToRepl"
  },
  {
    "key": "alt+a d",
    "command": "workbench.action.debug.start",
    "when": "debuggersAvailable && debugState == 'inactive'"
  },
  {
    "key": "alt+a shift d",
    "command": "-workbench.action.debug.selectandstart",
    "when": "debuggersAvailable && debugState == 'inactive'"
  },

  {
    "key": "alt+a d",
    "command": "wordkbench.action.debug.continue",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "f5",
    "command": "-workbench.action.debug.continue",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "alt+a q",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "key": "shift+f5",
    "command": "-workbench.action.debug.stop",
    "when": "inDebugMode && !focusedSessionIsAttach"
  },
  {
    "key": "alt+a n",
    "command": "workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'"
  },
  {
    "key": "f11",
    "command": "-workbench.action.debug.stepInto",
    "when": "debugState != 'inactive'"
  },
  {
    "key": "alt+a p",
    "command": "workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },
  {
    "key": "shift+f11",
    "command": "workbench.action.debug.stepOut",
    "when": "debugState == 'stopped'"
  },

  /* extension related */

  // jupyter notebook related.
  {
    "key": "ctrl+; d",
    "command": "-jupyter.moveCellsDown",
    "when": "editorTextFocus && jupyter.hascodecells && !jupyter.webExtension && !notebookEditorFocused"
  },

  // {
  //   "key": "alt+cmd+up",
  //   "command": "notebook.cell.moveUp",
  //   "when": "notebookEditorFocused && !inputFocus"
  // },
  // {
  //   "key": "alt+up",
  //   "command": "-notebook.cell.moveUp",
  //   "when": "notebookEditorFocused && !inputFocus"
  // },
  {
    "key": "alt+cmd+[",
    "command": "-notebook.fold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },
  {
    "key": "alt+cmd+]",
    "command": "-notebook.unfold",
    "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
  },

  // generate doc string
  {
    "key": "ctrl+space d",
    "command": "autoDocstring.generateDocstring",
    "when": "editorTextFocus"
  },

  /* git configure */
  // compare current open file in git
  {
    "key": "ctrl+space g",
    "command": "git.openChange"
  },

  /* disable various strange configurations */

  // some strage cursor keys
  {
    "key": "ctrl+f",
    "command": "-cursorRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
  },
  // disable ctrl + n binding
  {
    "key": "ctrl+n",
    "command": "-selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+n",
    "command": "-showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "-cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },

  // unknown, disable outdent
  {
    "key": "shift+tab",
    "command": "-outdent",
    "when": "editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  },

  // other ad hoc adjustment
  {
    "key": "shift+cmd+/",
    "command": "-workbench.action.chat.attachTools",
    "when": "inChatInput && chatMode == 'agent'"
  },

  /* address autocomplete selection , this is adjustment for latex*/

  // address interfere between autocomplete and snippet jumps
  // basically moving confirming autocomplete to enter always, use tab for placeholder switch
  // this is important for writing latex
  // {
  //     "key": "enter",
  //     "command": "insertSnippet",
  //     "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  // },
  {
    "key": "tab",
    "command": "-insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  //
  // {
  //     "key": "enter",
  //     "command": "editor.action.inlineSuggest.commit",
  //     "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
  // },
  {
    "key": "tab",
    "command": "-editor.action.inlineSuggest.commit",
    "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
  },
  //
  // {
  //     "key": "enter",
  //     "command": "acceptSelectedSuggestion",
  //     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  // },
  {
    "key": "tab",
    "command": "-acceptSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  //
  // {
  //     "key": "shift+enter",
  //     "command": "acceptAlternativeSelectedSuggestion",
  //     "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  // },
  {
    "key": "shift+tab",
    "command": "-acceptAlternativeSelectedSuggestion",
    "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
  },
  //
  // {
  //     "key": "enter",
  //     "command": "insertBestCompletion",
  //     "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  // },
  {
    "key": "tab",
    "command": "-insertBestCompletion",
    "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  //
  // {
  //     "key": "enter",
  //     "command": "insertNextSuggestion",
  //     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  // },
  {
    "key": "tab",
    "command": "-insertNextSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },
  //
  // {
  //     "key": "shift+enter",
  //     "command": "insertPrevSuggestion",
  //     "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  // },
  {
    "key": "shift+tab",
    "command": "-insertPrevSuggestion",
    "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
  },

  /*  --- Terminal Command Key Remappings to Control Key ---
    These mappings make Command+Key combinations in the VS Code integrated terminal
    behave like Control+Key combinations, which is standard in many terminal applications.
    The 'when' clause ensures these only apply when the terminal is focused.
    Cmd+A sends Ctrl+A (Start of Heading, often used for "go to beginning of line")    
    */
  {
    "key": "cmd+a",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0001" },
    "when": "terminalFocus"
  },
  // Cmd+B sends Ctrl+B (Start of Text, often used for "move back character" in Emacs mode)
  {
    "key": "cmd+b",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0002" },
    "when": "terminalFocus"
  },
  // Cmd+C sends Ctrl+C (Interrupt/SIGINT) when no text is selected.
  // This allows you to terminate running processes with Cmd+C, common in terminals.
  {
    "key": "cmd+c",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0003" }, // Unicode for Ctrl+C (ETX)
    "when": "terminalFocus && !terminalTextSelected"
  },
  // Cmd+C performs standard copy when text IS selected.
  // This maintains the expected copy behavior for selected text in the terminal.
  {
    "key": "cmd+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalTextSelected"
  },
  // Cmd+D sends Ctrl+D (End of Transmission, often used for "exit" or "delete char forward")
  {
    "key": "cmd+d",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0004" },
    "when": "terminalFocus"
  },
  // Cmd+E sends Ctrl+E (Enquiry, often used for "go to end of line")
  {
    "key": "cmd+e",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0005" },
    "when": "terminalFocus"
  },
  // Cmd+F sends Ctrl+F (Acknowledge, often used for "move forward character" in Emacs mode)
  {
    "key": "cmd+f",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0006" },
    "when": "terminalFocus"
  },
  // Cmd+H sends Ctrl+H (Backspace, often used for "delete char backward")
  {
    "key": "cmd+h",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0008" }, // Unicode for Ctrl+H (Backspace)
    "when": "terminalFocus"
  },
  // Cmd+K sends Ctrl+K (Vertical Tab, often used for "clear line from cursor to end")
  {
    "key": "cmd+k",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u000b" },
    "when": "terminalFocus"
  },
  // Cmd+L sends Ctrl+L (Form Feed, often used for "clear screen")
  {
    "key": "cmd+l",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u000c" },
    "when": "terminalFocus"
  },
  // Cmd+N sends Ctrl+N (Shift Out, often used for "next history item")
  {
    "key": "cmd+n",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u000e" },
    "when": "terminalFocus"
  },
  // Cmd+P sends Ctrl+P (Data Link Escape, often used for "previous history item")
  {
    "key": "cmd+p",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0010" },
    "when": "terminalFocus"
  },
  // Cmd+R sends Ctrl+R (Device Control 2, often used for "reverse search history")
  {
    "key": "cmd+r",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0012" },
    "when": "terminalFocus"
  },
  // Cmd+U sends Ctrl+U (Negative Acknowledge, often used for "clear line from cursor to beginning")
  {
    "key": "cmd+u",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0015" },
    "when": "terminalFocus"
  },
  // Cmd+W sends Ctrl+W (End of Medium, often used for "delete word backward")
  {
    "key": "cmd+w",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0017" },
    "when": "terminalFocus"
  },
  // Cmd+X sends Ctrl+X (Cancel)
  {
    "key": "cmd+x",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0018" },
    "when": "terminalFocus"
  },
  // Cmd+Y sends Ctrl+Y (End of Medium)
  {
    "key": "cmd+y",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u0019" },
    "when": "terminalFocus"
  },
  // Cmd+Z sends Ctrl+Z (Substitute/Suspend)
  {
    "key": "cmd+z",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001a" },
    "when": "terminalFocus"
  },
  // Cmd+[ sends Ctrl+[ (Escape - ESC)
  {
    "key": "cmd+[",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001b" },
    "when": "terminalFocus"
  },
  // Cmd+\\ sends Ctrl+\\ (File Separator)
  {
    "key": "cmd+\\",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001c" },
    "when": "terminalFocus"
  },
  // Cmd+] sends Ctrl+] (Group Separator)
  {
    "key": "cmd+]",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001d" },
    "when": "terminalFocus"
  },
  // Cmd+^ sends Ctrl+^ (Record Separator)
  {
    "key": "cmd+shift+6",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001e" },
    "when": "terminalFocus"
  },
  // Cmd+_ sends Ctrl+_ (Unit Separator, often used for "undo" in bash/zsh)
  {
    "key": "cmd+-",
    "command": "workbench.action.terminal.sendSequence",
    "args": { "text": "\u001f" },
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+w p",
    "command": "markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "cmd+k v",
    "command": "-markdown.showPreviewToSide",
    "when": "!notebookEditorFocused && editorLangId == 'markdown'"
  },
  {
    "key": "ctrl+w r",
    "command": "markdown.preview.refresh"
  },
  {
    "key": "ctrl+w p",
    "command": "markdown.extension.closePreview",
    "when": "activeWebviewPanelId == 'markdown.preview'"
  },
  {
    "key": "shift+cmd+v",
    "command": "-markdown.extension.closePreview",
    "when": "activeWebviewPanelId == 'markdown.preview'"
  }
]

/* related reference for configure some keys 

alt + letter key generates special letter in mac not key shortcut.
but it seems vscode can get around this automatically, after setting alt+w as close window, it does not output strange letter but close window.

https://stackoverflow.com/questions/60870113/mac-generating-%E2%88%86%CB%9A%C2%AC-characters-instead-of-executing-vscode-shortcuts-that-involve?ref=caspertsui.blog


*/
